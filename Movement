using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(Animator))]
[RequireComponent(typeof(SpriteRenderer))]
[RequireComponent(typeof(Rigidbody2D))]

public class Movement : MonoBehaviour
{
    [SerializeField] private Vector2 Velocity;
    [SerializeField] private LayerMask LayerMask;
    [SerializeField] private Animator _animator;

    private Vector2 targetVelocity;
    private bool grounded;
    private Vector2 graundNoraml;
    private Rigidbody2D _rigidbody;
    private ContactFilter2D contactFilter;
    private RaycastHit2D[] hitBuffer = new RaycastHit2D[16];
    private List<RaycastHit2D> hitBufferList = new List<RaycastHit2D>();
    private float minMoveDistance = 0.001f;
    private float shellRadius = 0.01f;

    private float _gravityModifier = 1f;
    private float _minGroundNormalyY = .65f;
    private SpriteRenderer _spriteRenderer;
    private float _speed = 6.5f;
    private int _purse;

    const string Jump = "Jump";
    const string Move = "Move";
    const string Idle = "idle";
    
    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.TryGetComponent(out Coin coin))
        {
            _purse += 1;
            Destroy(coin.gameObject);
        }
    }

    private void OnEnable()
    {
        _rigidbody = GetComponent<Rigidbody2D>();
        _spriteRenderer = GetComponent<SpriteRenderer>();
    }


    private void Start()
    {
        contactFilter.useTriggers = false;
        contactFilter.SetLayerMask(LayerMask);
        contactFilter.useLayerMask = true;
    }

    private void Update()
    {
        targetVelocity = new Vector2(Input.GetAxis("Horizontal"),0);

        if (Input.GetKey(KeyCode.Space) && grounded)
        {
            Velocity.y = 5;
            _animator.Play(Jump);
        }

        if (Input.GetKey(KeyCode.A))
        {
            _animator.Play(Move);
            _spriteRenderer.flipX = true;
        }
        else if (Input.GetKey(KeyCode.D))
        {
            _animator.Play(Move);
            _spriteRenderer.flipX = false;
        }
        else
        {
            _animator.Play(Idle);
        }
    }

    private void FixedUpdate()
    {
        Velocity += _gravityModifier * Physics2D.gravity * Time.deltaTime;
        Velocity.x = targetVelocity.x ;

        grounded = false;

        Vector2 deltaPosition = Velocity * Time.deltaTime * _speed;
        Vector2 moveAlongGround = new Vector2(graundNoraml.y, - graundNoraml.x);
        Vector2 move = moveAlongGround * deltaPosition.x;

        MovePlayer(move,false);

        move = Vector2.up * deltaPosition.y;

        MovePlayer(move,true);
    }

    private void MovePlayer(Vector2 move,bool yMovement)
    {
        float distance = move.magnitude;

        if (distance > minMoveDistance)
        {
            int count = _rigidbody.Cast(move, contactFilter, hitBuffer, distance + shellRadius);
            hitBufferList.Clear();

            for(int i = 0; i < count; i++)
            {
                hitBufferList.Add(hitBuffer[i]);
            }

            for(int i = 0; i < hitBufferList.Count; i++)
            {
                Vector2 currentNormal = hitBufferList[i].normal;

                if (currentNormal.y > _minGroundNormalyY)
                {
                    grounded = true;
                    if (yMovement)
                    {
                        graundNoraml = currentNormal;
                        currentNormal.x = 0;
                    }
                }

                float projection = Vector2.Dot(Velocity, currentNormal);

                if(projection < 0)
                {
                    Velocity = Velocity - projection * currentNormal;
                }

                float modifiedDistance = hitBufferList[i].distance - shellRadius;
                distance = modifiedDistance < distance ? modifiedDistance : distance;
            }  
        }
        _rigidbody.position = _rigidbody.position + move.normalized * distance;
    }
}
